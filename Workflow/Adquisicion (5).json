{
  "name": "Adquisicion",
  "nodes": [
    {
      "parameters": {},
      "id": "fd6acc6c-67c4-42d1-b4ca-cb8eb7b5fbe9",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        1616,
        240
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1gI5PxZ2WfFCmscPOt2Kih9REfjL273_4EOuUDBYzjMk",
          "mode": "list",
          "cachedResultName": "chile_usuarios",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1gI5PxZ2WfFCmscPOt2Kih9REfjL273_4EOuUDBYzjMk/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 507741229,
          "mode": "list",
          "cachedResultName": "Hoja1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1gI5PxZ2WfFCmscPOt2Kih9REfjL273_4EOuUDBYzjMk/edit#gid=507741229"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1984,
        400
      ],
      "id": "6df53c78-ca1a-4c56-b9f3-9df527dc6a44",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UEXDrq1cloFAt57X",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// === Function node ===\n// Mode: Run Once for All Items\n// Outputs: 1 (lista por RUT)\n\nconst CFG = {\n  country: 'CL',\n  // si faltan dígitos en fijos (7 u 8), podemos anteponer este área por defecto (p.ej. Santiago = '2')\n  defaultAreaCodeCL: '2'\n};\n\n// ── helpers básicos (los mismos que ya usabas) ─────────────────────────────────\nconst normKey = (k) => String(k).normalize('NFD').replace(/[\\u0300-\\u036f]/g,'')\n  .replace(/\\s+/g,' ').trim().toLowerCase().replace(/[^\\w ]/g,'').replace(/\\s+/g,' ');\nconst normRut = (rutRaw) => {\n  if (rutRaw == null || rutRaw === '') return null;\n  let s = String(rutRaw).replace(/\\./g,'').trim().toUpperCase();\n  if (!s.includes('-') && s.length > 1) s = s.slice(0,-1) + '-' + s.slice(-1);\n  return s;\n};\nconst toCents = (val) => {\n  if (val == null || val === '') return 0;\n  if (typeof val === 'number') return Math.round(val * 100);\n  let s = String(val).replace(/[\\s$]/g,'').replace(/\\./g,'').replace(',', '.');\n  const n = Number(s);\n  return Number.isFinite(n) ? Math.round(n * 100) : 0;\n};\nconst excelSerialToISO = (n) => {\n  const base = new Date('1899-12-30T00:00:00Z');\n  const d = new Date(base.getTime() + Math.round(Number(n))*86400*1000);\n  return Number.isNaN(d.getTime()) ? null : d.toISOString().slice(0,10);\n};\nconst toISO = (v) => {\n  if (v == null || v === '') return null;\n  if (typeof v === 'number') return excelSerialToISO(v);\n  const d = new Date(v);\n  if (!Number.isNaN(d.getTime())) return d.toISOString().slice(0,10);\n  const m = String(v).match(/(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{2,4})/);\n  if (m) {\n    const [_, dd, mm, yyyy] = m; const y = yyyy.length===2 ? ('20'+yyyy) : yyyy;\n    return `${y}-${mm.padStart(2,'0')}-${dd.padStart(2,'0')}`;\n  }\n  return null;\n};\nconst getField = (row, keyIndex, candidates) => {\n  for (const c of candidates) { const nk = normKey(c); if (keyIndex[nk] !== undefined) return row[keyIndex[nk]]; }\n  for (const nk in keyIndex) { if (candidates.some(c => nk.includes(normKey(c)))) return row[keyIndex[nk]]; }\n  return undefined;\n};\n\n// ── normalizador de teléfonos Chile → E.164 (+56XXXXXXXXX) ─────────────────────\nconst splitCandidates = (raw) => {\n  if (!raw && raw !== 0) return [];\n  const s = String(raw);\n  // separa por cualquier no-dígito (espacios, /, -, comas)\n  return s.split(/[^0-9]+/).filter(Boolean);\n};\n\nconst normCLPhone = (raw, kind /* 'mobile' | 'landline' | 'any' */) => {\n  if (raw == null || raw === '') return null;\n  const parts = String(raw).split(/[^0-9]+/).filter(Boolean); // separa múltiples teléfonos en una celda\n  for (let n of parts) {\n    // quita prefijos país/troncal\n    if (n.startsWith('56')) n = n.slice(2);\n    n = n.replace(/^0+/, '');\n\n    // --- regla móvil CL ---\n    // si es móvil y tiene 8 dígitos, antepone 9\n    if (kind === 'mobile' && n.length === 8) n = '9' + n;\n\n    // completar área para fijo corto\n    if ((kind !== 'mobile') && (n.length === 7 || n.length === 8)) {\n      n = (CFG.defaultAreaCodeCL || '2') + n; // ej. '2' Santiago si falta\n    }\n\n    // ahora validamos largo y tipo\n    if (n.length !== 9) continue;\n    const looksMobile = n.startsWith('9');\n\n    if (kind === 'mobile'   && !looksMobile) continue;\n    if (kind === 'landline' &&  looksMobile) continue;\n\n    return '+56' + n;\n  }\n  return null;\n};\n\n\n// ── procesamiento ───────────────────────────────────────────────────────────────\nconst rows = $input.all().map(i => i.json);\nconst batchId = $json.batch_id\n  ? $json.batch_id\n  : 'batch-' + new Date().toISOString().slice(0,10).replace(/-/g,'') + '-' + Math.random().toString(36).slice(2,6);\n\nconst normalized = [];\nconst rejected   = [];\n\nfor (let i=0; i<rows.length; i++) {\n  const r = rows[i];\n  const keyIndex = {}; for (const k of Object.keys(r)) keyIndex[normKey(k)] = k;\n\n  const mobRaw  = getField(r, keyIndex, ['Teléfono móvil','Telefono movil','Teléfono celular','Celular']);\n  const resRaw  = getField(r, keyIndex, ['Teléfono Residencial','Telefono residencial','Teléfono fijo','Telefono fijo']);\n\n  const mobile  = normCLPhone(mobRaw, 'mobile');\n  const land    = normCLPhone(resRaw, 'landline') || normCLPhone(resRaw, 'any'); // por si viene raro\n  const best    = mobile || land || null;\n\n  const parsed = {\n    rut:   normRut(getField(r, keyIndex, ['RUTS'])),\n    cupon: String(getField(r, keyIndex, ['Título','Titulo']) ?? '').trim(),\n    ciclo: String(getField(r, keyIndex, ['CicloCaptacion','Ciclo Captacion','CicloIndicador']) ?? '').trim(),\n    fechaVencimiento: toISO(getField(r, keyIndex, ['FechaVencimiento','Fecha Vencimiento'])),\n    saldo: toCents(getField(r, keyIndex, ['Saldo actualizado','Saldo Actualizado',' Saldo actualizado '])),\n    nombre: String(getField(r, keyIndex, ['Nombre']) ?? '').trim(),\n    origen_empresa: String(getField(r, keyIndex, ['Origen Empresa','OrigenEmpresa']) ?? '').trim(),\n    phones: {\n      raw_mobile: mobRaw ?? null,\n      raw_landline: resRaw ?? null,\n      mobile_e164: mobile,\n      landline_e164: land,\n      best_e164: best\n    }\n  };\n\n  const errs = [];\n  if (!parsed.rut)    errs.push('RUT faltante/incorrecto');\n  if (!parsed.cupon)  errs.push('Cupón faltante');\n  if (!Number.isFinite(parsed.saldo) || parsed.saldo < 0) errs.push('Saldo inválido');\n  // el teléfono no es obligatorio, pero si no hay ninguno marcamos aviso\n  if (!parsed.phones.best_e164) errs.push('Sin teléfono válido (móvil ni fijo)');\n\n  if (errs.length > 0 && (errs.length > 1 || !parsed.phones.best_e164)) {\n    rejected.push({ json: { row_number: i+1, raw: r, error_msg: errs.join('; ') } });\n  } else {\n    normalized.push(parsed);\n  }\n}\n\n// Agrupar por RUT → un doc por deudor\nconst byRut = new Map();\nfor (const p of normalized) {\n  if (!byRut.has(p.rut)) {\n    byRut.set(p.rut, {\n      batch_id: batchId,\n      rut: p.rut,\n      nombre: p.nombre || null,\n      origen_empresa: p.origen_empresa || null,\n      phones: { ...p.phones },     // inicial\n      deudas: []\n    });\n  }\n  const ref = byRut.get(p.rut);\n  // Si llega un móvil mejor que el que teníamos, actualizamos prioridad\n  ref.phones.mobile_e164  = ref.phones.mobile_e164  || p.phones.mobile_e164;\n  ref.phones.landline_e164= ref.phones.landline_e164|| p.phones.landline_e164;\n  ref.phones.best_e164    = ref.phones.best_e164    || p.phones.best_e164;\n\n  ref.deudas.push({\n    cupon: p.cupon,\n    ciclo: p.ciclo || null,\n    fechaVencimiento: p.fechaVencimiento || null,\n    saldo: p.saldo\n  });\n}\n\n// totales + orden fecha, y `to_number` listo\nconst outPerRut = [];\nfor (const [rut, doc] of byRut.entries()) {\n  doc.deudas.sort((a,b) => {\n    if (!a.fechaVencimiento && !b.fechaVencimiento) return 0;\n    if (!a.fechaVencimiento) return 1;\n    if (!b.fechaVencimiento) return -1;\n    return a.fechaVencimiento.localeCompare(b.fechaVencimiento);\n  });\n  const saldos = doc.deudas.map(d => d.saldo || 0);\n  const fechas = doc.deudas.map(d => d.fechaVencimiento).filter(Boolean);\n  const ciclos = new Set(doc.deudas.map(d => d.ciclo).filter(Boolean));\n  doc.totales = {\n    total_cupones: doc.deudas.length,\n    total_saldo_cents: saldos.reduce((a,b)=>a+b,0),\n    ciclos_distintos: ciclos.size,\n    min_vencimiento: fechas[0] || null,\n    max_vencimiento: fechas[fechas.length-1] || null\n  };\n  // valor directo para discado\n  doc.to_number = doc.phones.best_e164 || null;\n\n  outPerRut.push({ json: doc });\n}\n\nreturn outPerRut;\n// (Si querés 2 outputs, devolvé: return [outPerRut, rejected]; y poné Number of outputs = 2)\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2272,
        400
      ],
      "id": "30511b2f-bdc5-4e0d-8469-0781809f273e",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "update",
        "collection": "=Debtors",
        "updateKey": "=rut",
        "fields": "full_name,empresa,phone_e164,phone_mobile_e164,phone_landline_e164",
        "upsert": true,
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        2688,
        400
      ],
      "id": "822c31a8-f2a5-42f7-988c-44072af66269",
      "name": "MongoDB",
      "credentials": {
        "mongoDb": {
          "id": "CHwcSma6tuWs8i31",
          "name": "MongoDB account 4"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7906b483-0190-4121-a778-3fe78a44b0f8",
              "name": "rut",
              "value": "={{ $json.rut }}",
              "type": "string"
            },
            {
              "id": "a3b78eb4-78fe-4fbc-b680-9243c78d53c2",
              "name": "full_name",
              "value": "={{ $json.nombre }}",
              "type": "string"
            },
            {
              "id": "45a9c9b3-0179-4692-821d-dd9e21953710",
              "name": "empresa",
              "value": "={{ $json.origen_empresa }}",
              "type": "string"
            },
            {
              "id": "cae2d0fd-3094-4f46-99c3-6c1ad066ad4c",
              "name": "phone_e164",
              "value": "={{ $json.phones?.best_e164 || null }}",
              "type": "string"
            },
            {
              "id": "e84d708e-a0e1-486f-b047-bd03554a1366",
              "name": "phone_mobile_e164",
              "value": "={{ $json.phones?.mobile_e164 || null }}",
              "type": "string"
            },
            {
              "id": "767dcd48-7550-4538-a5a2-ef1f4e36b21c",
              "name": "phone_landline_e164",
              "value": "={{ $json.phones?.landline_e164 || null }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2480,
        400
      ],
      "id": "d0d122d1-2cb3-4c36-99f6-0f8f939c5100",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7906b483-0190-4121-a778-3fe78a44b0f8",
              "name": "key",
              "value": "={{$json.batch_id + '::' + $json.rut}}",
              "type": "string"
            },
            {
              "id": "d5d0d319-3f91-4d76-9d3f-d49cf208449a",
              "name": "created_at",
              "value": "={{ new Date() }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2480,
        592
      ],
      "id": "82edbb2c-7ead-4f92-8acf-d00d3478f16f",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "findOneAndUpdate",
        "collection": "=batch_debtors",
        "updateKey": "key",
        "fields": "=batch_id,rut,nombre,origen_empresa,phones,deudas,totales,to_number,key,created_at\n",
        "upsert": true,
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        2704,
        592
      ],
      "id": "7f8bd9da-7b33-451e-a5af-a6c1da66688c",
      "name": "MongoDB2",
      "credentials": {
        "mongoDb": {
          "id": "CHwcSma6tuWs8i31",
          "name": "MongoDB account 4"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "MongoDB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3d2a1d54-9be8-4eae-9ab8-4a9f1ad9d69a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "70bcb9c23754a02a41432fe09a382b8585943beec2860a71f508e60f8ccee350"
  },
  "id": "fnNV5jTQVMvsLPiu",
  "tags": []
}