"""
Script de validaci√≥n completa del servicio de adquisici√≥n
Verifica todos los componentes antes de la prueba final
"""

import asyncio
from datetime import datetime

# Importar servicios
import sys
sys.path.append('.')

from services.acquisition_batch_service import AcquisitionBatchService
from infrastructure.database_manager import DatabaseManager
from config.settings import get_settings

async def validate_acquisition_service():
    """Valida que el servicio de adquisici√≥n est√© completamente funcional"""
    
    print("üîç VALIDACI√ìN DEL SERVICIO DE ADQUISICI√ìN")
    print("=" * 60)
    
    try:
        # 1. Configuraci√≥n
        print("1Ô∏è‚É£ Configurando conexiones...")
        settings = get_settings()
        db_manager = DatabaseManager(settings.database.uri, settings.database.database)
        await db_manager.connect()
        print("   ‚úÖ Conexi√≥n a MongoDB establecida")
        
        # 2. Instanciar servicio
        print("\n2Ô∏è‚É£ Instanciando servicio de adquisici√≥n...")
        acquisition_service = AcquisitionBatchService(db_manager)
        print("   ‚úÖ AcquisitionBatchService creado")
        
        # 3. Verificar archivo Excel
        print("\n3Ô∏è‚É£ Verificando archivo Excel...")
        excel_path = "../docs/chile_usuarios.xlsx"
        
        try:
            with open(excel_path, 'rb') as f:
                file_content = f.read()
            
            file_size_mb = len(file_content) / (1024 * 1024)
            print(f"   ‚úÖ Archivo encontrado: {file_size_mb:.2f} MB")
            
        except FileNotFoundError:
            print(f"   ‚ùå Archivo no encontrado: {excel_path}")
            print("   üìå Aseg√∫rate de que el Excel est√© en docs/chile_usuarios.xlsx")
            return False
        
        # 4. Verificar cuenta
        print("\n4Ô∏è‚É£ Verificando cuenta 'strasing'...")
        account = await acquisition_service.account_service.get_account("strasing")
        
        if account:
            print(f"   ‚úÖ Cuenta encontrada: {account.account_name}")
            print(f"   ‚úÖ Status: {account.status}")
            print(f"   ‚úÖ Minutos disponibles: {account.minutes_remaining}")
        else:
            print("   ‚ùå Cuenta 'strasing' no encontrada")
            print("   üìå Necesitas crear la cuenta primero")
            return False
        
        # 5. Test de procesamiento (sin guardar)
        print("\n5Ô∏è‚É£ Test de procesamiento Excel...")
        
        try:
            # Procesar Excel con el procesador interno
            excel_result = acquisition_service.excel_processor.process_excel_data(
                file_content, "strasing"
            )
            
            print(f"   ‚úÖ Excel procesado exitosamente")
            print(f"   ‚úÖ Total deudores √∫nicos: {len(excel_result['debtors'])}")
            print(f"   ‚úÖ Batch ID generado: {excel_result['batch_id']}")
            
            # Muestra de un deudor procesado
            if excel_result['debtors']:
                sample = excel_result['debtors'][0]
                print(f"   ‚úÖ Ejemplo deudor:")
                print(f"      - RUT: {sample.get('rut')}")
                print(f"      - Nombre: {sample.get('nombre')}")
                print(f"      - Monto: ${sample.get('monto_total'):,.0f}")
                print(f"      - Cupones: {sample.get('cantidad_cupones')}")
                print(f"      - Tel√©fono: {sample.get('to_number')}")
                
        except Exception as e:
            print(f"   ‚ùå Error procesando Excel: {str(e)}")
            import traceback
            traceback.print_exc()
            return False
        
        # 6. Validar m√©todos del DatabaseManager
        print("\n6Ô∏è‚É£ Validando m√©todos de DatabaseManager...")
        
        required_methods = ['find_documents', 'insert_document', 'update_document']
        for method_name in required_methods:
            if hasattr(db_manager, method_name):
                print(f"   ‚úÖ {method_name}")
            else:
                print(f"   ‚ùå {method_name} - FALTANTE")
                return False
        
        print("\n" + "=" * 60)
        print("üéâ VALIDACI√ìN COMPLETA - TODO LISTO")
        print("=" * 60)
        
        print("üìã Resumen:")
        print("   ‚úÖ Conexi√≥n a MongoDB")
        print("   ‚úÖ Servicio de adquisici√≥n")
        print("   ‚úÖ Archivo Excel v√°lido")
        print("   ‚úÖ Cuenta 'strasing' activa")
        print("   ‚úÖ Procesamiento de Excel funcional")
        print("   ‚úÖ M√©todos de base de datos disponibles")
        
        print("\nüöÄ LISTO PARA PRUEBA REAL:")
        print("   curl -X POST \"http://localhost:8000/api/v1/batches/excel/create?account_id=strasing&processing_type=acquisition&allow_duplicates=true\" \\")
        print("     -F \"file=@docs/chile_usuarios.xlsx\"")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR DURANTE VALIDACI√ìN: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        await db_manager.close()
        print(f"\nüîå Conexi√≥n cerrada")

if __name__ == "__main__":
    result = asyncio.run(validate_acquisition_service())
    if result:
        print("\n‚úÖ ¬°SISTEMA COMPLETAMENTE VALIDADO!")
    else:
        print("\n‚ùå Se encontraron problemas que requieren atenci√≥n")